import Head from "next/head";
import styled from "styled-components";
import { $ui } from "../assets/scripts/colors.min.js";
import { useEffect, useState, useContext } from "react";
import { TypeScaleContext } from "../context/typeScaleContext";
import Text from "../components/Typography";
const Main = styled.main`
  max-width: 1280px;
  margin: auto;
`;
const ColorBlock = styled.div`
  background-color: ${(props) => props.color};
  width: 100px;
  height: 100px;
  padding: 12px;
  display: flex;
  justify-content: center;
  align-items: flex-end;
`;

const ColorForm = styled.div`
  max-width: 300px;
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: repeat(5, 1fr);
  gap: 12px;
  label {
    display: flex;
    flex-direction: column;
  }
`;

const Section = styled.section`
  padding: 24px;
`;

const GridSection = styled(Section)`
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 16px;
`;

const ColorsBox = styled.div`
  display: grid;
  gap: 12px;
  grid-template-columns: repeat(auto-fit, minmax(10px, 1fr));
`;

const initialColorOutput: string[] = [];

const Home = () => {
  const [colorInput, setColorInput] = useState("");
  const [colorSubmit, setColorSubmit] = useState("");
  const [colorOutput, setColorOutput] = useState(initialColorOutput);
  const [colorTheory, setColorTheory] = useState("triadic");
  const { setTypeScale } = useContext(TypeScaleContext);

  const handleColorInput = (col: string) => {
    if (colorTheory === "split complementary") {
      setColorOutput($ui.color.complement(col, "split"));
    }
    if (colorTheory === "double complementary") {
      setColorOutput($ui.color.complement(col, "double"));
    }
    if (colorTheory === "triadic") {
      setColorOutput($ui.color.triadic(col));
    }
    if (colorTheory === "tetradic") {
      setColorOutput($ui.color.tetradic(col));
    }
    if (colorTheory === "pentadic") {
      setColorOutput($ui.color.pentadic(col));
    }
  };

  // desaturate takes colours darker and lighter
  // darken makes a true black - doesnt really work
  console.log($ui.color);
  return (
    <div>
      <Head>
        <title>UI Generation</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Main>
        <Section>
          <h1>Generate Colors</h1>
        </Section>
        <GridSection>
          <div>
            <p>1. Input Colours</p>
            <ColorForm>
              <label>
                Insert colour as hex.
                <input
                  type="text"
                  value={colorInput}
                  onChange={(e) => setColorInput(e.target.value)}
                />
              </label>
              <label>
                Choose color theroem.
                <select onChange={(e) => setColorTheory(e.target.value)}>
                  <option>triadic</option>
                  <option>tetradic</option>
                  <option>pentadic</option>
                  <option>split complementary</option>
                  <option>double complementary</option>
                </select>
              </label>
              <label>
                Choose type scale.
                <select onChange={(e) => setTypeScale(e.target.value)}>
                  <option value="1.067">1.067 - Minor Second</option>
                  <option value="1.125">1.125 - Major Second</option>
                  <option value="1.200">1.200 - Minor Third</option>
                  <option value="1.250">1.250 - Major Third</option>
                  <option value="1.333">1.333 - Perfect Fourth</option>
                  <option value="1.414">1.414 - Augmented Fourth</option>
                  <option value="1.500">1.500 - Perfect Fifth</option>
                  <option value="1.618">1.618 - Golden Ratio</option>
                </select>
              </label>
              <button
                onClick={() => {
                  handleColorInput(colorInput);
                  setColorSubmit(colorInput);
                }}
              >
                Submit
              </button>
            </ColorForm>
          </div>
          <div>
            {colorOutput && (
              <>
                <p>Type Scale</p>
                <Text size={1} type="p">
                  hello
                </Text>
                <Text size={2} type="p">
                  hello
                </Text>
                <Text size={3} type="p">
                  hello
                </Text>
                <Text size={4} type="p">
                  hello
                </Text>
                <Text size={5} type="p">
                  hello
                </Text>
                <Text size={6} type="p">
                  hello
                </Text>
                <Text size={7} type="p">
                  hello
                </Text>
              </>
            )}
          </div>
        </GridSection>
        {colorSubmit && (
          <Section>
            <p>Submitted</p>
            <ColorBlock color={colorSubmit}>
              <p>{colorSubmit}</p>
            </ColorBlock>
          </Section>
        )}
        {colorOutput && (
          <Section>
            <p>Colors</p>
            <ColorsBox>
              {colorOutput &&
                colorOutput.map((col: string, i: number) => (
                  <ColorBlock key={i} color={col}>
                    <p>{col}</p>
                  </ColorBlock>
                ))}
            </ColorsBox>
          </Section>
        )}
      </Main>
    </div>
  );
};

export default Home;
