import Head from "next/head";
import styled from "styled-components";
import { $ui } from "../assets/scripts/colors.min.js";
import { useEffect, useState } from "react";

const Main = styled.main`
  max-width: 1280px;
  margin: auto;
`;
const ColorBlock = styled.div`
  background-color: ${(props) => props.color};
  width: 100px;
  height: 100px;
  padding: 12px;
  display: flex;
  justify-content: center;
  align-items: flex-end;
`;

const ColorForm = styled.div`
  max-width: 300px;
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: repeat(5, 1fr);
  gap: 12px;
  label {
    display: flex;
    flex-direction: column;
  }
`;

const Section = styled.section`
  padding: 48px;
`;

const ColorsBox = styled.div`
  display: grid;
  gap: 12px;
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
`;

const Home = () => {
  const [colorInput, setColorInput] = useState("");
  const [colorSubmit, setColorSubmit] = useState("");
  const [colorOutput, setColorOutput] = useState("");
  const [colorTheory, setColorTheory] = useState("");

  const handleColorInput = (col: string) => {
    if (colorTheory === "split complementary") {
      setColorOutput($ui.color.complement(col, "split")); // eslint-disable-next-line no-use-before-define
    }
    if (colorTheory === "double complementary") {
      setColorOutput($ui.color.complement(col, "double")); // eslint-disable-next-line no-use-before-define
    }
    if (colorTheory === "triadic") {
      setColorOutput($ui.color.triadic(col)); // eslint-disable-next-line no-use-before-define
    }
    if (colorTheory === "tetradic") {
      setColorOutput($ui.color.tetradic(col)); // eslint-disable-next-line no-use-before-define
    }
    if (colorTheory === "pentadic") {
      setColorOutput($ui.color.pentadic(col)); // eslint-disable-next-line no-use-before-define
    }
  };
  console.log(colorTheory);
  // #23D7FF
  // #23D7FF// #23D7FF

  return (
    <div>
      <Head>
        <title>UI Generation</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Main>
        <Section>
          <h1>Generate Colors</h1>
        </Section>
        <Section>
          <p>1. Input Colours</p>
          <ColorForm>
            <label>
              Insert colour as hex.
              <input
                type="text"
                value={colorInput}
                onChange={(e) => setColorInput(e.target.value)}
              />
            </label>
            <label>
              Choose color theroem.
              <select onChange={(e) => setColorTheory(e.target.value)}>
                <option>triadic</option>
                <option>tetradic</option>
                <option>pentadic</option>
                <option>split complementary</option>
                <option>double complementary</option>
              </select>
            </label>
            <button
              onClick={() => {
                handleColorInput(colorInput);
                setColorSubmit(colorInput);
              }}
            >
              Submit
            </button>
          </ColorForm>
        </Section>
        {colorSubmit && (
          <Section>
            <p>Submitted</p>
            <ColorBlock color={colorSubmit}>
              <p>{colorSubmit}</p>
            </ColorBlock>
          </Section>
        )}
        {colorOutput && (
          <Section>
            <p>Colors</p>
            <ColorsBox>
              {colorOutput &&
                colorOutput.map((col: string, i: number) => (
                  <ColorBlock key={i} color={col}>
                    <p>{col}</p>
                  </ColorBlock>
                ))}
            </ColorsBox>
          </Section>
        )}
      </Main>
    </div>
  );
};

export default Home;
