import Head from "next/head";
import styled from "styled-components";
import { $ui } from "../assets/scripts/colors.min.js";
import { useEffect, useState, useContext } from "react";
import { TypeScaleContext } from "../context/typeScaleContext";
import Text from "../components/Typography";
import useContrast from "../helpers/useContrast";
import useMonoChromatic from "../helpers/useMonoChromatic";
import tinycolor from "tinycolor2";

const Main = styled.main`
  max-width: 1280px;
  margin: auto;
`;
const ColorBlock = styled.div`
  background-color: ${(props) => props.color};
  width: 200px;
  height: 200px;
  border-radius: 10px;
  padding: 12px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  margin-right: 12px;
  margin-bottom: 12px;
  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.1);
`;

const ColorForm = styled.div`
  max-width: 300px;
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: repeat(5, 1fr);
  gap: 12px;
  label {
    display: flex;
    flex-direction: column;
  }
`;

const Section = styled.section`
  padding: 24px;
`;

const GridSection = styled(Section)`
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 16px;
`;

const ColorsBox = styled.div`
  display: flex;
  flex-wrap: wrap;
`;

const initialColorOutput: string[] = [];

const Home = () => {
  const [colorInput, setColorInput] = useState("");
  const [colorSubmit, setColorSubmit] = useState("");
  const [colorOutput, setColorOutput] = useState(initialColorOutput);
  const [colorTheory, setColorTheory] = useState("triadic");
  const { setTypeScale } = useContext(TypeScaleContext);

  const handleColorInput = (col: string) => {
    if (colorTheory === "split complementary") {
      setColorOutput($ui.color.complement(col, "split"));
    }
    if (colorTheory === "double complementary") {
      setColorOutput($ui.color.complement(col, "double"));
    }
    if (colorTheory === "triadic") {
      setColorOutput($ui.color.triadic(col));
    }
    if (colorTheory === "tetradic") {
      setColorOutput($ui.color.tetradic(col));
    }
    if (colorTheory === "pentadic") {
      setColorOutput($ui.color.pentadic(col));
    }
    if (colorTheory === "monochromatic") {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      setColorOutput(useMonoChromatic(col));
    }
  };

  // desaturate takes colours darker and lighter
  // darken makes a true black - doesnt really work

  // console.log("this", createMonoArray("#ff0000", 6));

  function contrastChecker(col: string) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    if (useContrast(col, "#000000")[1]) {
      return "#000000";
      // eslint-disable-next-line react-hooks/rules-of-hooks
    } else if (useContrast(col, "#ffffff")[1]) {
      return "#ffffff";
    }
    return "transparent";
  }

  function showFinalRatio(col: string) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return useContrast(contrastChecker(col), col)[3].toFixed(2);
  }

  return (
    <div>
      <Head>
        <title>UI Generation</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Main>
        <Section>
          <h1>Generate Colors </h1>
        </Section>
        <GridSection>
          <div>
            <p>1. Input Colours</p>
            <ColorForm>
              <label>
                Insert colour as hex.
                <input
                  type="text"
                  value={colorInput}
                  onChange={(e) => setColorInput(e.target.value)}
                />
              </label>
              <label>
                Choose color theroem.
                <select onChange={(e) => setColorTheory(e.target.value)}>
                  <option>triadic</option>
                  <option>tetradic</option>
                  <option>pentadic</option>
                  <option>split complementary</option>
                  <option>double complementary</option>
                  <option>monochromatic</option>
                </select>
              </label>
              <label>
                Choose type scale.
                <select onChange={(e) => setTypeScale(e.target.value)}>
                  <option value="1.067">1.067 - Minor Second</option>
                  <option value="1.125">1.125 - Major Second</option>
                  <option value="1.200">1.200 - Minor Third</option>
                  <option value="1.250">1.250 - Major Third</option>
                  <option value="1.333">1.333 - Perfect Fourth</option>
                  <option value="1.414">1.414 - Augmented Fourth</option>
                  <option value="1.500">1.500 - Perfect Fifth</option>
                  <option value="1.618">1.618 - Golden Ratio</option>
                </select>
              </label>
              <button
                onClick={() => {
                  handleColorInput(colorInput);
                  setColorSubmit(colorInput);
                }}
              >
                Submit
              </button>
            </ColorForm>
          </div>
          <div>
            {colorOutput && (
              <>
                <p>Type Scale</p>
                <Text size={1} type="p">
                  hello
                </Text>
                <Text size={2} type="p">
                  hello
                </Text>
                <Text size={3} type="p">
                  hello
                </Text>
                <Text size={4} type="p">
                  hello
                </Text>
                <Text size={5} type="p">
                  hello
                </Text>
                <Text size={6} type="p">
                  hello
                </Text>
                <Text size={7} type="p">
                  hello
                </Text>
              </>
            )}
          </div>
        </GridSection>
        {colorSubmit && (
          <Section>
            <p>Submitted</p>
            <ColorBlock color={colorSubmit}>
              <p>{colorSubmit}</p>
            </ColorBlock>
          </Section>
        )}
        {colorOutput && (
          <Section>
            <p>Colors</p>
            <ColorsBox>
              {colorOutput &&
                colorOutput.map((col: string, i: number) => {
                  return (
                    <ColorBlock key={i} color={col}>
                      <Text size={2} type="p" color={contrastChecker(col)}>
                        hex: {col}
                      </Text>
                      <Text size={0} type="p" color={contrastChecker(col)}>
                        Contrast %: {showFinalRatio(col)}
                      </Text>
                    </ColorBlock>
                  );
                })}
            </ColorsBox>
          </Section>
        )}
      </Main>
    </div>
  );
};

export default Home;
